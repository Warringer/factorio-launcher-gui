#!/usr/bin/env python3

#==================
# imports
#==================
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import messagebox as msg
from tkinter import filedialog as fDiag

import sys
import os
from os.path import expanduser
import os.path
import json
import platform
import subprocess

DEBUG = True

SETTINGS_FILE = "factorio-mods.json"
HOME = expanduser("~")

def debug(a):
    '''Helper functon for debugging'''
    if DEBUG:
        print(a)

class Data:

    def __init__(self, filename):
        '''Initialize the Data Fields'''
        self.filename = filename
        self.gamedir = ""
        self.modsdir = ""
        self.mods = {}
        self.system = platform.system()
        self.load_data()
        self.gameDir = ""
        self.modsDir = ""
        self.isSteam = self._has_steam()

    def _has_steam(self):
        cmd = "where" if platform.system() == "Windows" else "which"
        try: 
            subprocess.call([cmd, "steam"])
            return True
        except: 
            return False
        

    def save_data(self):
        '''Saves the Data into the Settings File'''
        data = {}
        data["Directories"] = {}
        data["Directories"]["Game"] = self.gamedir
        data["Directories"]["Mods"] = self.modsdir
        data["Mods"] = self.mods
        with open(self.filename, "w") as write_file:
            json.dump(data, write_file, indent=4)

    def load_data(self):
        '''Attempts to Load the Settings File, if there is none, create one'''
        try:
            with open(SETTINGS_FILE, "r") as json_file:
                json_data = json.load(json_file)
            self.gamedir = json_data["Directories"]["Game"]
            self.modsdir = json_data["Directories"]["Mods"]
            self.mods = json_data["Mods"]
        except:
            debug("Creating new settings file")
            self.mods["Vanilla"] = ""
            self.save_data()

    def get_game_dir(self):
        '''Returns the Game directory'''#
        if self.gamedir:
            return self.gamedir
        else:
            return self._get_default_game_dir()

    def get_mods_dir(self):
        '''Returns the Mods directory'''
        if self.modsdir:
            return self.modsdir
        else:
            return self._get_default_mods_dir()                        

    def _get_default_mods_dir(self):
        '''Returns the Default Mods directories for Windows, Mac and Linux'''
        if self.modsDir == "":
            if self.system == "Linux":
                self.modsDirt = os.path.join(HOME, ".factorio")
            elif self.system == "Windows":
                self.modsDirt = os.path.join(os.getenv('APPDATA'), "Factorio")
            elif self.system == "Darwin":
                self.modsDirt = os.path.join(HOME, "Library", "Application Support", "factorio")
            else:
                self.modsDirt = ""
        return self.modsDirt

    def _get_default_game_dir(self):
        '''Returns the default Game directories for Windows, Mac and Linux'''
        if self.gameDir == "":
            if self.system == "Linux":
                self.gameDir = os.path.join(HOME, ".factorio")
            elif self.system == "Windows":
                if self.isSteam:
                    self.gameDir = os.path.join(os.getenv("programfiles(x86)"), "Steam", "steam")
                else:    
                    self.gameDir = os.path.join("C:/", "Program Files", "Factorio")
            elif self.system == "Darwin":
                if self.isSteam:
                    self.gameDir = os.path.join(HOME, "Library", "Application Support", "Steam", "steamapps", "common", "Factorio", "factorio.app", "Contents")
                else:
                    self.gameDir = os.path.join("Applications", "factorio.app", "Contents")
            else:
                self.gameDir = ""
        return self.gameDir

# Launcher Class
class Launcher:

    def __init__(self, rootTab, data):
        '''Initialize the Launcher Class with the root Element and the Data'''
        self.frame = ttk.Frame(rootTab)
        self.data = data
        self._add_buttons()

    def _add_buttons(self):
        '''Dynamically add the Launcher Buttons'''
        self.labelFrame = ttk.LabelFrame(self.frame, text="Launcher")
        self.labelFrame.pack(fill="both", expand=True)
        buttons = []
        x = 0
        for mod in self.data.mods:
            debug(mod + " " + self.data.mods[mod])
            button = ttk.Button(self.labelFrame , text=mod+" Factorio", command=self._m_launch(mod))
            button.pack(fill="both", expand=True)
            x = x + 1

        # Cancel Button
        self.can = ttk.Button(self.labelFrame , text="Cancel", command=self._cancel)
        self.can.pack(fill="both", expand=True)

    def _mbox(self, mod):
        '''Display a Message Box'''
        text = "Launching "+mod
        msg.showinfo("Launching", text)

    def _launch(self, mod=""):
        '''Launches the Actual game'''
        self._mbox(mod + " Factorio")
        if self.data.gamedir:
            launcher = self.data.gamedir
        else:
            if self.data.isSteam:
                if self.data.system == "Windows":
                    launcher = '""%s" %s"' % (self.data.get_game_dir(), "-applaunch 427520")
                else:
                    launcher = "steam -applaunch 427520"
            else:
                if self.data.system == "Windows":
                    launcher = os.path.join(self.data.get_game_dir(), "factorio.exe")
                else:
                    launcher = os.path.join(self.data.get_game_dir(), "factorio")
        if self.data.mods[mod]:
            if self.data.get_mods_dir():
                launcher = launcher + " --mod-directory " + self.data.get_mods_dir() + "/" + self.data.mods[mod]
            else:
                launcher = launcher + " --mod-directory " + HOME + "/.factorio/" + self.data.mods[mod]
        debug(launcher)
        if not DEBUG:
            os.system(launcher)
        self._cancel()

    def _m_launch(self, mod):
        '''Returns the Lambda for the callback'''
        return (lambda: self._launch(mod))

    def _cancel(self):
        '''Closes the Script'''
        main.quit()
        main.destroy()

# Directories Class
class Directories:

    def __init__(self, rootTab, data):
        '''Initialize the Directories Class with the root Element and the Data'''
        self.frame = ttk.Frame(rootTab)
        self.data = data
        self.entrylen = 40
        self.game = tk.StringVar()
        self.game.set(self.data.gamedir)
        self.mods = tk.StringVar()
        self.mods.set(self.data.modsdir)
        self._add_file_controls()

    def _dir_diag(self, dirName):
        '''Simple Directory Dialog'''
        if dirName == "":
            dirName = HOME
        options = {}
        options['initialdir'] = dirName
        options['mustexist'] = False
        options['parent'] = main
        return fDiag.askdirectory(**options)

    def _game_diag(self):
        '''Opens a Directory Dialog for the Game Directory'''
        name = self._dir_diag(self.game.get())
        self.game.set(name)

    def _mods_diag(self):
        '''Opens a Directory Dialog for the Mod Directory'''
        name = self._dir_diag(self.mods.get())
        self.mods.set(name)

    def _reset(self):
        '''Resets the Directories and saves the reset data to file'''
        self.game.set("")
        self.mods.set("")
        self._save()

    def _save(self):
        '''Save the changed Data to file'''
        self.data.gamedir = self.game.get()
        self.data.modsdir = self.mods.get()
        self.data.save_data()

    def _add_file_controls(self):
        '''Adds the GUI elements for the Game and Mod Directories'''
        self.labelFrame = ttk.LabelFrame(self.frame, text="Directories")
        self.labelFrame.pack(fill="both", expand=True)
        self.gameButton = ttk.Button(self.labelFrame, text="Game Directory", command=self._game_diag)
        self.gameButton.grid(column=0, row=0, sticky=N+S+E+W, padx=5, pady=5)
        self.gameTextField = ttk.Entry(self.labelFrame, width=self.entrylen, textvariable=self.game)
        self.gameTextField.grid(column=1, row=0, padx=5, pady=5)
        self.modButton = ttk.Button(self.labelFrame, text="Mod Directory", command=self._mods_diag)
        self.modButton.grid(column=0, row=1, sticky=N+S+E+W, padx=5, pady=5)
        self.modTextField = ttk.Entry(self.labelFrame, width=self.entrylen, textvariable=self.mods)
        self.modTextField.grid(column=1, row=1, padx=5, pady=5)

        self.saveButton = ttk.Button(self.labelFrame, text="Save Changes", command=self._save)
        self.saveButton.grid(column=0, row=2, padx=5, pady=5)
        self.resetButton = ttk.Button(self.labelFrame, text="Reset to Defaults", command=self._reset)
        self.resetButton.grid(column=1, row=2, padx=5, pady=5)

class Mods:

    def __init__(self, rootTab, data):
        '''Initialize the Mods Class with the root Element and the Data'''
        self.data = data
        self.frame = ttk.Frame(rootTab)
        self.entrylen = 20
        self._drawInterface()

    def _save_data(self):
        '''Saves the changed Mod data to file'''

    def _dir_diag(self, dirName):
        '''Simple Directory Dialog'''
        if dirName == "":
            dirName = HOME
        options = {}
        options['initialdir'] = dirName
        options['mustexist'] = False
        options['parent'] = main
        return fDiag.askdirectory(**options)

    def _drawInterface(self):
        '''Draws the interface for the Mod Tab'''
        
        


gamedata = Data(SETTINGS_FILE)

# Create Instance
main = tk.Tk()

# Add Title
main.title("Factorio Games")

# Disable Resizing
main.resizable(False, False)

# Tabs for ease of use

tabControl = ttk.Notebook(main)

tab1 = Launcher(tabControl, gamedata)
tabControl.add(tab1.frame, text="Launch Factorio")
tab2 = Mods(tabControl, gamedata)
tabControl.add(tab2.frame, text="Mod Directories")
tab3 = Directories(tabControl, gamedata)
tabControl.add(tab3.frame, text="Directories")
tabControl.pack(expand=1, fill="both")


#==================
# Starting GUI
#==================
main.mainloop()
