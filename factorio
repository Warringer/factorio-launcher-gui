#!/usr/bin/env python3

#==================
# imports
#==================
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import messagebox as msg
from tkinter import filedialog as fDiag

import sys
import os
from os.path import expanduser
import json


SETTINGS_FILE = "factorio-mods.json"

HOME = expanduser("~")

class Data:

    def __init__(self):
        self.gamedir = ""
        self.modsdir = ""
        self.mods = {}
        self.loadData()

    def saveData(self):
        data = {}
        data["Directories"] = {}
        data["Directories"]["Game"] = self.gamedir
        data["Directories"]["Mods"] = self.modsdir
        data["Mods"] = self.mods
        print(data)
        with open(SETTINGS_FILE, "w") as write_file:
            json.dump(data, write_file, indent=4)

    def loadData(self):
        try:
            with open(SETTINGS_FILE, "r") as json_file:
                json_data = json.load(json_file)
            self.gamedir = json_data["Directories"]["Game"]
            self.modsdir = json_data["Directories"]["Mods"]
            self.mods = json_data["Mods"]
        except:
            print("Creating new settings file")
            self.mods["Vanilla"] = ""
            self.saveData()

# Launcher Class
class Launcher:

    def __init__(self, rootTab, data):
        self.frame = ttk.Frame(rootTab)
        self.data = data
        self._addButtons()

    def _addButtons(self):
        # Add Buttons
        # Add Launcher Button
        self.labelFrame = ttk.LabelFrame(self.frame, text="Launcher")
        self.labelFrame.pack(fill="both", expand=True)
        buttons = []
        x = 0
        for mod in self.data.mods:
            print(mod + " " + self.data.mods[mod])
            button = ttk.Button(self.labelFrame , text=mod+" Factorio", command=self._make_callback(mod))
            button.pack(fill="both", expand=True)
            x = x + 1

        # Cancel Button
        self.can = ttk.Button(self.labelFrame , text="Cancel", command=self._cancel)
        self.can.pack(fill="both", expand=True)

    def _mbox(self, mod):
        text = "Launching "+mod
        msg.showinfo("Launching", text)

    def _launch(self, mod=""):
        if self.data.gamedir:
            launcher = self.data.gamedir
        else:
            if os.name == "nt":
                launcher = '""%s" %s"' % ("%ProgramFiles(x86)%\\Steam\\steam", "-applaunch 427520")
            else:
                launcher = "steam -applaunch 427520"
        if mod:
            if self.moddir:
                launcher = launcher + " --mod-directory " + self.data.modsdir + "/" + mod
            else:
                launcher = launcher + " --mod-directory " + HOME + "/.factorio/" + mod
        print(launcher)
        #os.system(launcher)

    def _callback(self, mod):
        self._mbox(mod + " Factorio")
        self._launch(self.data.mods[mod])
        self._cancel()

    def _make_callback(self, mod):
        return (lambda: self._callback(mod))

    # Factorio Starting Options
    def _cancel(self):
        main.quit()
        main.destroy()

class Directories:

    def __init__(self, rootTab, data):
        self.frame = ttk.Frame(rootTab)
        self.data = data
        self.entrylen = 40
        self.game = tk.StringVar()
        self.game.set(self.data.gamedir)
        self.mods = tk.StringVar()
        self.mods.set(self.data.modsdir)
        self._addFileControls()

    def _fileDiag(self, dirName):
        if dirName == "":
            dirName = HOME
        options = {}
        options['initialdir'] = dirName
        options['mustexist'] = False
        options['parent'] = main
        return fDiag.askdirectory(**options)

    def _gameDiag(self):
        name = self._fileDiag(self.game.get())
        self.game.set(name)

    def _modDiag(self):
        name = self._fileDiag(self.mods.get())
        self.mods.set(name)

    def _reset(self):
        self.game.set("")
        self.mods.set("")
        self._save()

    def _save(self):
        self.data.gamedir = self.game.get()
        self.data.modsdir = self.mods.get()
        self.data.saveData()

    def _addFileControls(self):
        self.labelFrame = ttk.LabelFrame(self.frame, text="Directories")
        self.labelFrame.pack(fill="both", expand=True)
        self.gameButton = ttk.Button(self.labelFrame, text="Game Directory", command=self._gameDiag)
        self.gameButton.grid(column=0, row=0, sticky=N+S+E+W, padx=5, pady=5)
        self.gameTextField = ttk.Entry(self.labelFrame, width=self.entrylen, textvariable=self.game)
        self.gameTextField.grid(column=1, row=0, padx=5, pady=5)
        self.modButton = ttk.Button(self.labelFrame, text="Mod Directory", command=self._modDiag)
        self.modButton.grid(column=0, row=1, sticky=N+S+E+W, padx=5, pady=5)
        self.modTextField = ttk.Entry(self.labelFrame, width=self.entrylen, textvariable=self.mods)
        self.modTextField.grid(column=1, row=1, padx=5, pady=5)

        self.saveButton = ttk.Button(self.labelFrame, text="Save Changes", command=self._save)
        self.saveButton.grid(column=0, row=2, padx=5, pady=5)
        self.resetButton = ttk.Button(self.labelFrame, text="Reset to Defaults", command=self._reset)
        self.resetButton.grid(column=1, row=2, padx=5, pady=5)

gamedata = Data()

# Create Instance
main = tk.Tk()

# Add Title
main.title("Factorio Games")

# Disable Resizing
main.resizable(False, False)

# Tabs for ease of use

tabControl = ttk.Notebook(main)

tab1 = Launcher(tabControl, gamedata)
tabControl.add(tab1.frame, text="Launch Factorio")
tab2 = Directories(tabControl, gamedata)
tabControl.add(tab2.frame, text="Directories")
tabControl.pack(expand=1, fill="both")


#==================
# Starting GUI
#==================
main.mainloop()
