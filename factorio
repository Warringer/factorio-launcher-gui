#!/usr/bin/env python3

#==================
# imports
#==================
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import messagebox as msg
from tkinter import filedialog as fDiag

import sys
import os
from os.path import expanduser
import json


SETTINGS_FILE = "factorio-mods.json"

HOME = expanduser("~")

class Data:

    def __init__(self, filename):
        '''Initialize the Data Fields'''
        self.filename = filename
        self.gamedir = ""
        self.modsdir = ""
        self.mods = {}
        self.loadData()

    def saveData(self):
        '''Saves the Data into the Settings File'''
        data = {}
        data["Directories"] = {}
        data["Directories"]["Game"] = self.gamedir
        data["Directories"]["Mods"] = self.modsdir
        data["Mods"] = self.mods
        with open(self.filename, "w") as write_file:
            json.dump(data, write_file, indent=4)

    def loadData(self):
        '''Attempts to Load the Settings File, if there is none, create one'''
        try:
            with open(SETTINGS_FILE, "r") as json_file:
                json_data = json.load(json_file)
            self.gamedir = json_data["Directories"]["Game"]
            self.modsdir = json_data["Directories"]["Mods"]
            self.mods = json_data["Mods"]
        except:
            print("Creating new settings file")
            self.mods["Vanilla"] = ""
            self.saveData()

# Launcher Class
class Launcher:

    def __init__(self, rootTab, data):
        '''Initialize the Launcher Class with the root Element and the Data'''
        self.frame = ttk.Frame(rootTab)
        self.data = data
        self._addButtons()

    def _addButtons(self):
        '''Dynamically add the Launcher Buttons'''
        self.labelFrame = ttk.LabelFrame(self.frame, text="Launcher")
        self.labelFrame.pack(fill="both", expand=True)
        buttons = []
        x = 0
        for mod in self.data.mods:
            print(mod + " " + self.data.mods[mod])
            button = ttk.Button(self.labelFrame , text=mod+" Factorio", command=self._m_launch(mod))
            button.pack(fill="both", expand=True)
            x = x + 1

        # Cancel Button
        self.can = ttk.Button(self.labelFrame , text="Cancel", command=self._cancel)
        self.can.pack(fill="both", expand=True)

    def _mbox(self, mod):
        '''Display a Message Box'''
        text = "Launching "+mod
        msg.showinfo("Launching", text)

    def _launch(self, mod=""):
        '''Launches the Actual game'''
        self._mbox(mod + " Factorio")
        if self.data.gamedir:
            launcher = self.data.gamedir
        else:
            if os.name == "nt":
                launcher = '""%s" %s"' % ("%ProgramFiles(x86)%\\Steam\\steam", "-applaunch 427520")
            else:
                launcher = "steam -applaunch 427520"
        if mod:
            if self.moddir:
                launcher = launcher + " --mod-directory " + self.data.modsdir + "/" + mod
            else:
                launcher = launcher + " --mod-directory " + HOME + "/.factorio/" + mod
        #os.system(launcher)
        self._cancel()

    def _m_launch(self, mod):
        '''Returns the Lambda for the callback'''
        return (lambda: self._launch(mod))

    def _cancel(self):
        '''Closes the Script'''
        main.quit()
        main.destroy()

class Directories:

    def __init__(self, rootTab, data):
        '''Initialize the Directories Class with the root Element and the Data'''
        self.frame = ttk.Frame(rootTab)
        self.data = data
        self.entrylen = 40
        self.game = tk.StringVar()
        self.game.set(self.data.gamedir)
        self.mods = tk.StringVar()
        self.mods.set(self.data.modsdir)
        self._addFileControls()

    def _dirDiag(self, dirName):
        '''Simple Directory Dialog'''
        if dirName == "":
            dirName = HOME
        options = {}
        options['initialdir'] = dirName
        options['mustexist'] = False
        options['parent'] = main
        return fDiag.askdirectory(**options)

    def _gameDiag(self):
        '''Opens a Directory Dialog for the Game Directory'''
        name = self._dirDiag(self.game.get())
        self.game.set(name)

    def _modDiag(self):
        '''Opens a Directory Dialog for the Mod Directory'''
        name = self._dirDiag(self.mods.get())
        self.mods.set(name)

    def _reset(self):
        '''Resets the Directories and saves the reset data to file'''
        self.game.set("")
        self.mods.set("")
        self._save()

    def _save(self):
        '''Save the changed Data to file'''
        self.data.gamedir = self.game.get()
        self.data.modsdir = self.mods.get()
        self.data.saveData()

    def _addFileControls(self):
        '''Adds the GUI elements for the Game and Mod Directories'''
        self.labelFrame = ttk.LabelFrame(self.frame, text="Directories")
        self.labelFrame.pack(fill="both", expand=True)
        self.gameButton = ttk.Button(self.labelFrame, text="Game Directory", command=self._gameDiag)
        self.gameButton.grid(column=0, row=0, sticky=N+S+E+W, padx=5, pady=5)
        self.gameTextField = ttk.Entry(self.labelFrame, width=self.entrylen, textvariable=self.game)
        self.gameTextField.grid(column=1, row=0, padx=5, pady=5)
        self.modButton = ttk.Button(self.labelFrame, text="Mod Directory", command=self._modDiag)
        self.modButton.grid(column=0, row=1, sticky=N+S+E+W, padx=5, pady=5)
        self.modTextField = ttk.Entry(self.labelFrame, width=self.entrylen, textvariable=self.mods)
        self.modTextField.grid(column=1, row=1, padx=5, pady=5)

        self.saveButton = ttk.Button(self.labelFrame, text="Save Changes", command=self._save)
        self.saveButton.grid(column=0, row=2, padx=5, pady=5)
        self.resetButton = ttk.Button(self.labelFrame, text="Reset to Defaults", command=self._reset)
        self.resetButton.grid(column=1, row=2, padx=5, pady=5)

class Mods:

    def __init__(self, rootTab, data):
        '''Initialize the Mods Class with the root Element and the Data'''
        self.data = data
        self.frame = ttk.Frame(rootTab)
        self.dirButtons = {}
        self.remButtons = {}
        self.dirNames = {}
        self.modNames = {}
        self.entrylen = 20
        self._drawInterface()

    def _saveData(self):
        '''Saves the changed Mod data to file'''
        print(json.dumps(self.data))
        self.data.mods = self.dirNames
        print(json.dumps(self.data))
            

    def _dirDiag(self, dirName):
        '''Simple Directory Dialog'''
        if dirName == "":
            dirName = HOME
        options = {}
        options['initialdir'] = dirName
        options['mustexist'] = False
        options['parent'] = main
        return fDiag.askdirectory(**options)

    def _changeDir(self, mod):
        '''Callback to change the Directory for a mod'''
        modDir = self.dirNames[mod].get()
        result = self._dirDiag(modDir)
        path = os.path.normpath(result)
        res = path.split(os.sep)
        modDir = res[-1]
        self.dirNames[mod].set(modDir)
        
    def _m_changeDir(self, mod):
        '''Returns the Lambda for the callback'''
        return ( lambda: self._changeDir(mod))

    def _drawInterface(self):
        '''Draws the interface for the Mod Tab'''
        self.labelFrame = ttk.LabelFrame(self.frame, text="Mod Directories")
        self.labelFrame.pack(fill="both", expand=True)
        label1 = ttk.Label(self.labelFrame, text="ModPack Name")
        label1.grid(column=0, row=0)
        label2 = ttk.Label(self.labelFrame, text="Directory Name")
        label2.grid(column=1, row=0)
        x = 1
        for mod in self.data.mods:
            dirName = tk.StringVar()
            modName = tk.StringVar()
            dirName.set(self.data.mods[mod])
            modName.set(mod)
            self.dirNames[mod] = dirName
            self.modNames[mod] = modName
            dirNameField = ttk.Entry(self.labelFrame, width=self.entrylen, textvariable=dirName)
            dirNameField.grid(column=1, row=x, padx=5, pady=5)
            modNameField = ttk.Entry(self.labelFrame, width=self.entrylen, textvariable=modName)
            modNameField.grid(column=0, row=x, padx=5, pady=5)
            dirButton = ttk.Button(self.labelFrame, text="Change Directory", command=self._m_changeDir(mod))
            dirButton.grid(column=2, row=x, padx=5, pady=5)
            self.dirButtons[mod] = dirButton
            remButton = ttk.Button(self.labelFrame, text="Remove")
            remButton.grid(column=3, row=x, padx=5, pady=5)
            self.remButtons[mod] = remButton
            x = x + 1
        self.addButton = ttk.Button(self.labelFrame, text="Add Mod Pack")
        self.addButton.grid(column=2, row=x, padx=5, pady=5, columnspan=2)

gamedata = Data(SETTINGS_FILE)

# Create Instance
main = tk.Tk()

# Add Title
main.title("Factorio Games")

# Disable Resizing
main.resizable(False, False)

# Tabs for ease of use

tabControl = ttk.Notebook(main)

tab1 = Launcher(tabControl, gamedata)
tabControl.add(tab1.frame, text="Launch Factorio")
tab2 = Mods(tabControl, gamedata)
tabControl.add(tab2.frame, text="Mod Directories")
tab3 = Directories(tabControl, gamedata)
tabControl.add(tab3.frame, text="Directories")
tabControl.pack(expand=1, fill="both")


#==================
# Starting GUI
#==================
main.mainloop()
